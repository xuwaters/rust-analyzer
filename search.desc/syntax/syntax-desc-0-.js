searchState.loadedDescShard("syntax", 0, "Syntax Tree library used throughout the rust-analyzer.\nLike <code>SyntaxNodePtr</code>, but remembers the type of node.\nOffset is exactly between two leaves.\nThe current latest stable edition, note this is usually …\nFired before traversing the node.\nInternal node in the immutable tree. It has other nodes …\nFired after the node is traversed.\nNo leaves at offset – possible for the empty file.\n<code>Parse</code> is the result of the parsing: a syntax tree and a …\nOnly a single leaf at offset.\nA <code>SmolStr</code> is a string type that has the following …\nA builder that can be used to efficiently build a <code>SmolStr</code>.\n<code>SourceFile</code> represents a parse tree for a single Rust file.\nRepresents the result of unsuccessful tokenization, parsing\nThe kind of syntax node, e.g. <code>IDENT</code>, <code>USE_KW</code>, or <code>STRUCT</code>.\nA “pointer” to a <code>SyntaxNode</code>, via location in the …\nA range in text, represented as a pair of <code>TextSize</code>.\nA measure of text length. Also, equivalently, an index …\nConvert value to <code>SmolStr</code> using <code>fmt::Display</code>, potentially …\nThere might be zero, one or two leaves at a given offset.\n<code>WalkEvent</code> describes tree walking process.\nCollection of assorted algorithms for syntax trees.\nReturns a <code>&amp;str</code> slice of this <code>SmolStr</code>.\nAbstract Syntax Tree, layered on top of untyped <code>SyntaxNode</code>s\nCreate a new <code>TextRange</code> with the given <code>offset</code> and <code>len</code> (…\nAdd an offset to this range.\nChecked addition. Returns <code>None</code> if overflow occurred.\nSubtract an offset from this range.\nChecked subtraction. Returns <code>None</code> if overflow occurred.\nCheck if this range contains an offset.\nCheck if this range contains an offset.\nCheck if this range completely contains another range.\nExtends the range to cover <code>other</code> as well.\nExtends the range to cover <code>other</code> offsets as well.\nCreate a zero-length range at the specified offset (…\nThe end point of this range.\nBuilds a <code>SmolStr</code> from <code>self</code>.\nFormats arguments to a <code>SmolStr</code>, potentially without …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThings which exist to solve practical issues, but which …\nThe range covered by both ranges, if it exists. If the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this is an identifier or a keyword.\nChecks whether this syntax kind is a weak keyword for the …\nReturns <code>true</code> if <code>self</code> has a length of zero bytes.\nCheck if this range is empty.\nReturns <code>true</code> if <code>self</code> is heap-allocated.\nChecks whether this syntax kind is a strict or weak …\nChecks whether this syntax kind is a strict keyword for …\nReturns kind of this element.\nReturns kind of this element.\nConvert to option, preferring the left leaf in case of a …\nReturns the length of <code>self</code> in bytes.\nThe size of this range.\nMatches a <code>SyntaxNode</code> against an <code>ast</code> type.\nConstructs a <code>SmolStr</code> from a <code>str</code>, heap-allocating if …\nCreates a new <code>TextRange</code> with the given <code>start</code> and <code>end</code> (…\nCreates a new instance of <code>TextSize</code> from a raw <code>u32</code>.\nCreates a new empty <code>SmolStrBuilder</code>.\nCreates new Node.\nConstructs an inline variant of <code>SmolStr</code>.\nConstructs a <code>SmolStr</code> from a statically allocated string.\nThe text size of some primitive text-like object.\nConverts from <code>Parse&lt;T&gt;</code> to <code>Result&lt;T, Vec&lt;SyntaxError&gt;&gt;</code>.\nRelative order of the two ranges (overlapping ranges are …\nAppends the given <code>char</code> to the end of <code>self</code>’s buffer.\nAppends a given string slice onto the end of <code>self</code>’s …\nConvert to option, preferring the right leaf in case of a …\nThe start point of this range.\nSyntax Tree editor\nPrimitive tree editor, ed for trees.\nReturns the length of the text covered by this element.\nReturns the length of the text covered by this element.\nConverts this parse result into a parse result for an …\nGets the parsed syntax tree as a typed ast node.\nLike <code>SyntaxNodePtr::cast</code> but the trait bounds work out.\nUtilities for validating string and char literals and …\nCreate a range up to the given end (<code>..end</code>).\nA set of utils methods to reuse on other abstraction levels\nReturns ancestors of the node at the offset, sorted by …\nFinds a (potentially minimal) diff, which, applied to <code>from</code>…\nFinds a node of specific Ast type at offset. Note that …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFinds the first sibling in the given direction which is …\nSkip to next non <code>trivia</code> token\nSkip to next non <code>whitespace</code> token\nAn iterator over <code>SyntaxNode</code> children of a particular AST …\nThe main trait to go from untyped <code>SyntaxNode</code>  to a typed …\nLike <code>AstNode</code>, but wraps tokens rather than interior nodes.\n<code>*</code>\n<code>..</code>\nfor&lt;’a&gt; …\n<code>..=</code>\n’a\n&amp;mut self\n<code>-</code>\n<code>!</code>\nself\nTrait\nTrait to describe operations common to both <code>RangeExpr</code> and …\n&amp;self\nuse\nAdds a new associated item after all of the existing …\nAdds a new associated item at the start of the associated …\nReturns all attributes of this node, including inner …\nReturns all attributes of this node, including inner …\nReturns the textual content of a doc comment node as a …\nThis module contains functions for editing syntax trees. …\nStructural editing for ast.\nDeals with field init shorthand\nDeals with field init shorthand\nFind the params corresponded to generic arg\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the attr_kind is <code>Inner</code>.\nReturns <code>true</code> if the attr_kind is <code>Outer</code>.\nfalse if the block is an intrinsic part of the syntax and …\nThis module contains free-standing functions for creating …\nBlock expressions accept outer and inner attributes, but …\nReturns <code>true</code> if <code>self</code> would need to be wrapped in …\nReturns the parent ast::Module, this is different than the …\nParses an <code>ast::Expr</code> from <code>text</code>.\nPrecedence representation.\nRemoves the corresponding generic arg\nRemoves the existing generic param\nDeletes the usetree node represented by the input. …\nRemove the unnecessary braces in current <code>UseTreeList</code>\nThis will either replace the initializer, or in the case …\nSplits off the given prefix, making it the path component …\nBuilds upon <code>crate::ast::make</code> constructors to create ast …\nConstructs a matching <code>ast::GenericArgList</code>\nWraps the use tree in use tree list with no top level path …\nSoft-deprecated in favor of mutable tree editing API …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhile the parent module defines basic atomic “…\nIdeally this function wouldn’t exist since it involves …\nReturns a <code>BindPat</code> if the path has just one segment, a …\nCreates a tuple of patterns from an iterator of patterns.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGets all of the tracked syntax mappings, if any.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>SyntaxFactory</code>, generating mappings between …\nCreates a <code>SyntaxFactory</code> without generating mappings.\nUtility trait to allow calling syntax editor functions …\nPosition describing where to insert elements\nRepresents a completed <code>SyntaxEditor</code> operation.\nWhich syntax elements in the modified syntax tree were …\nFinds which syntax elements have been annotated with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a syntax editor to start editing from <code>root</code>\nCreates a unique syntax annotation to attach data to.\nRoot of the modified syntax tree.\nRoot of the initial unmodified syntax tree.\nMaps a child node of the input ancestor to the …\nLike <code>SyntaxMapping::upmap_child</code> but for syntax elements.\nUtility trait to allow calling <code>ted</code> functions with …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRaw ‘\\r’ encountered.\nRaw ‘\\r’ encountered in raw string.\nUsed for ASCII chars (written directly or via <code>\\x00</code>..<code>\\x7f</code> …\n‘\\u{}’\nErrors and warnings that can occur during string …\nUnescaped character that was expected to be escaped (e.g. …\nUsed for high bytes (<code>\\x80</code>..<code>\\xff</code>).\nInvalid character in numeric escape (e.g. ‘\\xz’)\nNon-hexadecimal value in ‘\\u{..}’.\nInvalid escape character (e.g. ‘\\z’).\n‘\\u{_12}’\nEscaped ’&#39; character without continuation.\nInvalid in-bound unicode character code, e.g. ‘\\u{DFFF}…\nUsed for mixed utf8 string literals, i.e. those that allow …\nWhat kind of literal do we parse.\nExpected 1 char, but more than 1 were found.\nAfter a line ending with ’&#39;, multiple lines are skipped.\n‘\\u’ not followed by ‘{’.\nNon-ascii character in byte literal, byte string literal, …\nCharacter code in numeric escape is non-ascii (e.g. ‘\\xFF…\nOut of bounds unicode character code, e.g. ‘\\u{FFFFFF}’…\nMore than 6 characters in ‘\\u{..}’, e.g. ‘…\nNumeric character escape is too short (e.g. ‘\\x1’).\nNo closing brace in ‘\\u{..}’, e.g. ‘\\u{12’.\nUnicode escape code in byte literal.\nAfter a line ending with ’&#39;, the next line contains …\nExpected 1 char, but 0 were found.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true for actual errors, as opposed to warnings.\nTakes a contents of a byte literal (without quotes), and …\nTakes a contents of a char literal (without quotes), and …\nTakes the contents of a mixed-utf8 literal (without …\nTakes the contents of a unicode-only (non-mixed-utf8) …")