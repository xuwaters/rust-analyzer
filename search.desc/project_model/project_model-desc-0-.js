searchState.loadedDescShard("project_model", 0, "In rust-analyzer, we maintain a strict separation between …\nProject workspace was discovered by running <code>cargo metadata</code> …\n<code>CargoWorkspace</code> represents the logical structure of, well, …\nA set of cfg-overrides per crate.\nProject with a set of disjoint files, not belonging to any …\nTry to automatically detect where the rustc source …\nProject workspace was specified using a <code>rust-project.json</code> …\nAny kind of Cargo lib crate-type (dylib, rlib, proc-macro, …\nMore or less <code>AbsPathBuf</code> with non-None parent.\nStarting point for metadata returned by <code>cargo metadata</code>\nInformation associated with a cargo crate\n<code>PackageRoot</code> describes a package root folder. Which may be …\nExplicit path for the rustc source directory.\nDescribes how to set the rustc source directory.\nInformation associated with a package’s target\nOutput of the build script and proc-macro building steps …\nList of features enabled on this package\nWhether to pass <code>--all-targets</code> to cargo invocations.\nAuthors as given in the <code>Cargo.toml</code>\nThe build system specific file that describes this project,\nA set of cfg overrides for this workspace.\nThe data describing this project, such as its dependencies.\nList of packages this package depends on\nDescription as given in the <code>Cargo.toml</code>\nAttempts to discover the toolchain’s sysroot from the …\nRust edition for this package\nExtra args to pass to the cargo command.\nExtra env vars to set when invoking the cargo command\nList of features to activate.\nFeatures provided by the crate, mapped to the features …\nFetches the metadata for the given <code>cargo_toml</code> manifest. A …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA global set of overrides matching all crates.\nHomepage as given in the <code>Cargo.toml</code>\nString representation of package id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the project workspace is <code>Json</code>.\nDoes this package come from the local filesystem (and is …\nIs from the local filesystem and may be edited\nWhether this package is a member of the workspace\nKind of target\nLicense as given in the <code>Cargo.toml</code>\nLicense file as given in the <code>Cargo.toml</code>\nPath containing the <code>Cargo.toml</code>\nThe contents of [package.metadata.rust-analyzer]\nName as given in the <code>Cargo.toml</code>\nName as given in the <code>Cargo.toml</code> or generated from the file …\nPackage that provided this target\nA list of all crates referenced by this crate (and the …\n<code>rust-project.json</code> file format.\nReadme file as given in the <code>Cargo.toml</code>\nRepository as given in the <code>Cargo.toml</code>\nRequired features of the target without which it won’t …\nDependencies graph\nReturns sysroot “root” directory, where <code>bin/</code>, <code>etc/</code>, …\nPath to the main source file of the target\nGet the workspace’s root package of this metadata …\nRuns the build scripts for the given <code>ProjectWorkspace</code>s. …\nThe command to run instead of <code>cargo check</code> for building …\nRuns the build scripts for this <code>ProjectWorkspace</code>.\nRust version as given in the <code>Cargo.toml</code>\nHolds cfg flags for the current target. We get those by …\nrustc private crate source\nA set of overrides matching specific crates.\nReturns the sysroot “source” directory, where stdlib …\nSysroot loading behavior\nThe sysroot loaded for this workspace.\nrustc target\nRuns <code>rustc --print target-spec-json</code> to get the …\nOptional path to use instead of <code>target</code> when building\nBuild directory\nThe target data layout queried for workspace.\nTargets provided by the crate (lib, bin, example, test, ……\nReturns the roots for the current <code>ProjectWorkspace</code> The …\nReturns a command to run a tool preferring the cargo …\nThe toolchain version used by this workspace.\nVersion given in the <code>Cargo.toml</code>\nThe list of default workspace members\nGet the workspace default packages.\nReturns the union of the features of all member crates in …\nA list of all workspace members\nThe workspace-level metadata object. Null if non-existent.\nGet the workspace packages.\nWorkspace root\nInvoke <code>cargo check</code> through the RUSTC_WRAPPER.\nList of features to activate.\nDo not activate the <code>default</code> feature.\nThe build script results for the workspace.\nThe workspace as returned by <code>cargo metadata</code>.\nIs this file a cargo script file?\nEnvironment variables set in the <code>.cargo/config</code> file.\nEnvironment variables set in the <code>.cargo/config</code> file.\nAdditional <code>cargo metadata</code> error. (only populated if …\nThe file in question.\nThe rustc workspace loaded for this workspace. An <code>Err(None)</code>…\nIs this target a proc-macro\nAdditional, build-specific data about a crate.\nA crate points to the root module of a crate and lists the …\nIdentifies a crate by position in the crates array.\nAny kind of Cargo lib crate-type (dylib, rlib, proc-macro, …\nRoots and crates that compose this Rust project.\nCan run a binary.\nA template-like structure for describing runnables.\nThe kind of runnable.\nRun a single test.\nThe arguments passed to <code>Runnable::program</code>.\nPath corresponding to the build system-specific file …\nReturns an iterator over the crates in the project.\nThe current working directory of the runnable.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe name associated with this crate.\nReturns the path to the project’s manifest, if it exists.\nReturns the path to the project’s manifest or root …\nReturns the number of crates in the project.\nCreate a new ProjectJson instance.\nReturns the path to the project’s root folder.\nThe program invoked by the runnable.\nReturns the path to the project’s root folder.\nThe kind of target.\nUse <code>cargo --print target-spec-json</code>, either from with the …\nUse <code>rustc --print target-spec-json</code>, either from with the …\nDetermines how <code>rustc --print target-spec-json</code> is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")