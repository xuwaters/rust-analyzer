searchState.loadedDescShard("cfg", 0, "cfg defines conditional compiling options, <code>cfg</code> attribute …\nA simple configuration value passed in from the outside.\nConfiguration options used for conditional compilation on …\nA <code>#[cfg]</code> directive in Disjunctive Normal Form (DNF).\neg. <code>#[cfg(test)]</code>\neg. <code>#[cfg(target_os = &quot;linux&quot;)]</code>\nReturns <code>CfgDiff</code> objects that would enable this directive …\nFold the cfg by querying all basic <code>Atom</code> and <code>KeyValue</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the total number of atoms changed by this diff.\nCreate a new CfgDiff. Will return None if the same item …\nComputes a list of present or absent atoms in <code>opts</code> that …")