searchState.loadedDescShard("ide_assists", 0, "<code>assists</code> crate provides a bunch of code assists, also known …\nAll assists should be resolved.\nUnique identifier of the assist, should not be shown to …\nA way to control how many assist to resolve during the …\nNo assists should be resolved.\nOnly a certain assist should be resolved.\nHold the <code>AssistId</code> data of a certain assist to resolve. The …\nThe id of the assist.\nReturn all the assists applicable at the given position.\nThe command to execute after the assist is applied.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShort description of the assist, as shown in the UI.\nComputing source change sometimes is much more costly then …\nTarget ranges are used to sort assists: the smaller the …\nAssorted functions shared by several assists.\nGiven <code>original_items</code> retrieved from the trait definition …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is a method with a heuristics to support test methods …")