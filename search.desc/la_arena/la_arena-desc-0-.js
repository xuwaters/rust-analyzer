searchState.loadedDescShard("la_arena", 0, "Yet another index-based arena.\nYet another index-based arena.\nA map from arena indexes to some other type. Space …\nA view into a single entry in a map, which may either be …\nThe index of a value allocated in an arena that holds <code>T</code>s.\nA range of densely allocated arena values.\nAn iterator over the arena’s elements.\nAn occupied entry.\nA view into an occupied entry in a <code>ArenaMap</code>. It is part of …\nThe raw index of a value in an arena.\nA vacant entry.\nA view into an vacant entry in a <code>ArenaMap</code>. It is part of …\nAllocates a new value on the arena, returning the …\nDensely allocates multiple values, returning the values’ …\nProvides in-place mutable access to an occupied entry …\nClears the map, removing all elements.\nEmpties the arena, removing all contained values.\nReturns whether the map contains a value for the specified …\nReturns the end of the index range.\nGets the given key’s corresponding entry in the map for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new index from a <code>RawIdx</code>.\nConstructs a <code>RawIdx</code> from a u32.\nGets a reference to the value in the entry.\nReturns a reference to the value associated with the …\nGets a mutable reference to the value in the entry.\nReturns a mutable reference to the value associated with …\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry with the <code>OccupiedEntry</code>’s …\nInserts a value associated with a given arena index into …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the entry into a mutable reference to its value.\nConverts this index into the underlying <code>RawIdx</code>.\nDeconstructs a <code>RawIdx</code> into the underlying u32.\nReturns whether the index range is empty.\nReturns whether the arena contains no elements.\nReturns an iterator over the arena indexes and values in …\nReturns an iterator over the arena’s elements.\nReturns an iterator over the arena indexes and values in …\nReturns an iterator over the arena’s mutable elements.\nReturns the length of the arena.\nCreates a new index range inclusive of the start value and …\nCreates a new empty map.\nCreates a new empty arena.\nCreates a new index range inclusive of the start value and …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nTakes the value of the entry out of the map, and returns …\nRemoves an index from the map, returning the value at the …\nReserves capacity for at least additional more elements to …\nShrinks the capacity of the map as much as possible.\nReallocates the arena to make it take up as little space …\nReturns the start of the index range.\nReturns an iterator over the values in the map.\nReturns an iterator over the arena’s values.\nReturns an iterator over mutable references to the values …\nReturns an iterator over the arena’s mutable values.\nCreate a new empty map with specific capacity.\nCreate a new empty arena with specific capacity.")