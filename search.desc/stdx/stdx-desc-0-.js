searchState.loadedDescShard("stdx", 0, "Missing batteries for standard libraries.\nA <code>std::process::Child</code> wrapper that will kill the child on …\nAsserts that the condition is always true and returns its …\nThis file is a port of only the necessary features from …\nAppends formatted string to a <code>String</code>.\nAppends formatted string to a <code>String</code> and returns the <code>String</code>…\nReturns the argument unchanged.\nGenerates <code>From</code> impls for <code>Enum E { Foo(Foo), Bar(Bar) }</code> …\nCalls <code>U::from(self)</code>.\nAsserts that the condition is never true and returns its …\nSee <code>NonEmptyVec</code>.\nA micro-crate to enhance panic messages with context info.\nPrints backtrace to stderr, useful for debugging.\nRead both stdout and stderr of child without deadlocks.\nWe don’t use <code>rand</code>, as that’s too many things for us.\nReturns all final segments of the argument, longest first.\nA utility module for working with threads that …\nThe most common type of <code>Map</code>: just using <code>Any</code>; Map&lt;dyn Any&gt;.\nMethods for downcasting from an <code>Any</code>-like trait object.\nA view into a single location in an <code>Map</code>, which may be …\nA trait for the conversion of an object into a boxed trait …\nA collection containing zero or one values for any given …\nAn occupied Entry\nA view into a single occupied location in an <code>Map</code>.\nRaw access to the underlying <code>HashMap</code>.\nA hasher designed to eke a little more speed out, given …\nA vacant Entry\nA view into a single empty location in an <code>Map</code>.\nDowncast from <code>&amp;mut Any</code> to <code>&amp;mut T</code>, without checking the …\nDowncast from <code>&amp;Any</code> to <code>&amp;T</code>, without checking the type …\nGets the entry for the given type in the collection for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value stored in the collection …\nSets the value of the entry with the VacantEntry’s key, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert self into the appropriate boxed form.\nConverts the OccupiedEntry into a mutable reference to the …\nCreate an empty collection.\nEnsures a value is in the entry by inserting the result of …\nGets the <code>TypeId</code> of <code>self</code>.\nA <code>Vec</code> that is guaranteed to at least contain one element.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAny thread which does work caused by the user typing (e.g. …\nAny thread which does work that isn’t in the critical …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")