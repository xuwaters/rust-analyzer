(function() {
    var type_impls = Object.fromEntries([["hir_ty",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-TypeFlags\" class=\"impl\"><a href=\"#impl-Binary-for-TypeFlags\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.Binary.html\" title=\"trait core::fmt::Binary\">Binary</a> for TypeFlags</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.Binary.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.Binary.html#tymethod.fmt\">Read more</a></div></details></div></details>","Binary","hir_ty::TypeFlags"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd-for-TypeFlags\" class=\"impl\"><a href=\"#impl-BitAnd-for-TypeFlags\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a> for TypeFlags</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/bit/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, other: TypeFlags) -&gt; TypeFlags</h4></section></summary><div class=\"docblock\"><p>The bitwise and (<code>&amp;</code>) of the bits in two flags values.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = TypeFlags</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details></div></details>","BitAnd","hir_ty::TypeFlags"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign-for-TypeFlags\" class=\"impl\"><a href=\"#impl-BitAndAssign-for-TypeFlags\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a> for TypeFlags</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: TypeFlags)</h4></section></summary><div class=\"docblock\"><p>The bitwise and (<code>&amp;</code>) of the bits in two flags values.</p>\n</div></details></div></details>","BitAndAssign","hir_ty::TypeFlags"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr-for-TypeFlags\" class=\"impl\"><a href=\"#impl-BitOr-for-TypeFlags\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a> for TypeFlags</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/bit/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, other: TypeFlags) -&gt; TypeFlags</h4></section></summary><div class=\"docblock\"><p>The bitwise or (<code>|</code>) of the bits in two flags values.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/bit/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = TypeFlags</h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details></div></details>","BitOr","hir_ty::TypeFlags"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign-for-TypeFlags\" class=\"impl\"><a href=\"#impl-BitOrAssign-for-TypeFlags\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a> for TypeFlags</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: TypeFlags)</h4></section></summary><div class=\"docblock\"><p>The bitwise or (<code>|</code>) of the bits in two flags values.</p>\n</div></details></div></details>","BitOrAssign","hir_ty::TypeFlags"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor-for-TypeFlags\" class=\"impl\"><a href=\"#impl-BitXor-for-TypeFlags\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a> for TypeFlags</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/bit/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: TypeFlags) -&gt; TypeFlags</h4></section></summary><div class=\"docblock\"><p>The bitwise exclusive-or (<code>^</code>) of the bits in two flags values.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/bit/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = TypeFlags</h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details></div></details>","BitXor","hir_ty::TypeFlags"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign-for-TypeFlags\" class=\"impl\"><a href=\"#impl-BitXorAssign-for-TypeFlags\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a> for TypeFlags</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a href=\"#method.bitxor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: TypeFlags)</h4></section></summary><div class=\"docblock\"><p>The bitwise exclusive-or (<code>^</code>) of the bits in two flags values.</p>\n</div></details></div></details>","BitXorAssign","hir_ty::TypeFlags"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-TypeFlags\" class=\"impl\"><a href=\"#impl-Clone-for-TypeFlags\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for TypeFlags</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; TypeFlags</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.82.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.82.0/src/core/clone.rs.html#174\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.82.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","hir_ty::TypeFlags"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-TypeFlags\" class=\"impl\"><a href=\"#impl-Debug-for-TypeFlags\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for TypeFlags</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","hir_ty::TypeFlags"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3CTypeFlags%3E-for-TypeFlags\" class=\"impl\"><a href=\"#impl-Extend%3CTypeFlags%3E-for-TypeFlags\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;TypeFlags&gt; for TypeFlags</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T&gt;(&amp;mut self, iterator: T)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = TypeFlags&gt;,</div></h4></section></summary><div class=\"docblock\"><p>The bitwise or (<code>|</code>) of the bits in each flags value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.82.0/src/core/iter/traits/collect.rs.html#454\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.82.0/src/core/iter/traits/collect.rs.html#462\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<TypeFlags>","hir_ty::TypeFlags"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Flags-for-TypeFlags\" class=\"impl\"><a href=\"#impl-Flags-for-TypeFlags\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Flags for TypeFlags</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.FLAGS\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.FLAGS\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">FLAGS</a>: &amp;'static [Flag&lt;TypeFlags&gt;] = _</h4></section></summary><div class='docblock'>The set of defined flags.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Bits\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bits\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Bits</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The underlying bits type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bits\" class=\"method trait-impl\"><a href=\"#method.bits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">bits</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Get the underlying bits value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bits_retain\" class=\"method trait-impl\"><a href=\"#method.from_bits_retain\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_bits_retain</a>(bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.u16.html\">u16</a>) -&gt; TypeFlags</h4></section></summary><div class='docblock'>Convert from a bits value exactly.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.empty\" class=\"method trait-impl\"><a href=\"#method.empty\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">empty</a>() -&gt; Self</h4></section></summary><div class='docblock'>Get a flags value with all bits unset.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.all\" class=\"method trait-impl\"><a href=\"#method.all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">all</a>() -&gt; Self</h4></section></summary><div class='docblock'>Get a flags value with all known bits set.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bits\" class=\"method trait-impl\"><a href=\"#method.from_bits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_bits</a>(bits: Self::Bits) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Convert from a bits value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bits_truncate\" class=\"method trait-impl\"><a href=\"#method.from_bits_truncate\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_bits_truncate</a>(bits: Self::Bits) -&gt; Self</h4></section></summary><div class='docblock'>Convert from a bits value, unsetting any unknown bits.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_name\" class=\"method trait-impl\"><a href=\"#method.from_name\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_name</a>(name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Get a flags value with the bits of a flag with the given name set. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method trait-impl\"><a href=\"#method.iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">iter</a>(&amp;self) -&gt; Iter&lt;Self&gt;</h4></section></summary><div class='docblock'>Yield a set of contained flags values. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_names\" class=\"method trait-impl\"><a href=\"#method.iter_names\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">iter_names</a>(&amp;self) -&gt; IterNames&lt;Self&gt;</h4></section></summary><div class='docblock'>Yield a set of contained named flags values. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method trait-impl\"><a href=\"#method.is_empty\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Whether all bits in this flags value are unset.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_all\" class=\"method trait-impl\"><a href=\"#method.is_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_all</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Whether all known bits in this flags value are set.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersects\" class=\"method trait-impl\"><a href=\"#method.intersects\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">intersects</a>(&amp;self, other: Self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Whether any set bits in a source flags value are also set in a target flags value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method trait-impl\"><a href=\"#method.contains\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">contains</a>(&amp;self, other: Self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Whether all set bits in a source flags value are also set in a target flags value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method trait-impl\"><a href=\"#method.insert\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">insert</a>(&amp;mut self, other: Self)<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>The bitwise or (<code>|</code>) of the bits in two flags values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method trait-impl\"><a href=\"#method.remove\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">remove</a>(&amp;mut self, other: Self)<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>The intersection of a source flags value with the complement of a target flags value (<code>&amp;!</code>). <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.toggle\" class=\"method trait-impl\"><a href=\"#method.toggle\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">toggle</a>(&amp;mut self, other: Self)<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>The bitwise exclusive-or (<code>^</code>) of the bits in two flags values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set\" class=\"method trait-impl\"><a href=\"#method.set\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">set</a>(&amp;mut self, other: Self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a>)<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Call [<code>Flags::insert</code>] when <code>value</code> is <code>true</code> or [<code>Flags::remove</code>] when <code>value</code> is <code>false</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersection\" class=\"method trait-impl\"><a href=\"#method.intersection\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">intersection</a>(self, other: Self) -&gt; Self</h4></section></summary><div class='docblock'>The bitwise and (<code>&amp;</code>) of the bits in two flags values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union\" class=\"method trait-impl\"><a href=\"#method.union\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">union</a>(self, other: Self) -&gt; Self</h4></section></summary><div class='docblock'>The bitwise or (<code>|</code>) of the bits in two flags values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.difference\" class=\"method trait-impl\"><a href=\"#method.difference\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">difference</a>(self, other: Self) -&gt; Self</h4></section></summary><div class='docblock'>The intersection of a source flags value with the complement of a target flags value (<code>&amp;!</code>). <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.symmetric_difference\" class=\"method trait-impl\"><a href=\"#method.symmetric_difference\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">symmetric_difference</a>(self, other: Self) -&gt; Self</h4></section></summary><div class='docblock'>The bitwise exclusive-or (<code>^</code>) of the bits in two flags values.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.complement\" class=\"method trait-impl\"><a href=\"#method.complement\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">complement</a>(self) -&gt; Self</h4></section></summary><div class='docblock'>The bitwise negation (<code>!</code>) of the bits in a flags value, truncating the result.</div></details></div></details>","Flags","hir_ty::TypeFlags"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CTypeFlags%3E-for-TypeFlags\" class=\"impl\"><a href=\"#impl-FromIterator%3CTypeFlags%3E-for-TypeFlags\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;TypeFlags&gt; for TypeFlags</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T&gt;(iterator: T) -&gt; TypeFlags<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = TypeFlags&gt;,</div></h4></section></summary><div class=\"docblock\"><p>The bitwise or (<code>|</code>) of the bits in each flags value.</p>\n</div></details></div></details>","FromIterator<TypeFlags>","hir_ty::TypeFlags"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-TypeFlags\" class=\"impl\"><a href=\"#impl-Hash-for-TypeFlags\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for TypeFlags</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;mut __H</a>)<div class=\"where\">where\n    __H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.82.0/src/core/hash/mod.rs.html#235-237\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.82.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","hir_ty::TypeFlags"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-TypeFlags\" class=\"impl\"><a href=\"#impl-IntoIterator-for-TypeFlags\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for TypeFlags</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = TypeFlags</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = Iter&lt;TypeFlags&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;TypeFlags as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/1.82.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","hir_ty::TypeFlags"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-TypeFlags\" class=\"impl\"><a href=\"#impl-LowerHex-for-TypeFlags\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.LowerHex.html\" title=\"trait core::fmt::LowerHex\">LowerHex</a> for TypeFlags</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.LowerHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.LowerHex.html#tymethod.fmt\">Read more</a></div></details></div></details>","LowerHex","hir_ty::TypeFlags"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-TypeFlags\" class=\"impl\"><a href=\"#impl-Not-for-TypeFlags\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/bit/trait.Not.html\" title=\"trait core::ops::bit::Not\">Not</a> for TypeFlags</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.not\" class=\"method trait-impl\"><a href=\"#method.not\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/bit/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; TypeFlags</h4></section></summary><div class=\"docblock\"><p>The bitwise negation (<code>!</code>) of the bits in a flags value, truncating the result.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/bit/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = TypeFlags</h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details></div></details>","Not","hir_ty::TypeFlags"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Octal-for-TypeFlags\" class=\"impl\"><a href=\"#impl-Octal-for-TypeFlags\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.Octal.html\" title=\"trait core::fmt::Octal\">Octal</a> for TypeFlags</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.Octal.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.Octal.html#tymethod.fmt\">Read more</a></div></details></div></details>","Octal","hir_ty::TypeFlags"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-TypeFlags\" class=\"impl\"><a href=\"#impl-PartialEq-for-TypeFlags\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for TypeFlags</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;TypeFlags) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.82.0/src/core/cmp.rs.html#261\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","hir_ty::TypeFlags"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub-for-TypeFlags\" class=\"impl\"><a href=\"#impl-Sub-for-TypeFlags\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a> for TypeFlags</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: TypeFlags) -&gt; TypeFlags</h4></section></summary><div class=\"docblock\"><p>The intersection of a source flags value with the complement of a target flags value (<code>&amp;!</code>).</p>\n<p>This method is not equivalent to <code>self &amp; !other</code> when <code>other</code> has unknown bits set.\n<code>difference</code> won’t truncate <code>other</code>, but the <code>!</code> operator will.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = TypeFlags</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details></div></details>","Sub","hir_ty::TypeFlags"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign-for-TypeFlags\" class=\"impl\"><a href=\"#impl-SubAssign-for-TypeFlags\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a> for TypeFlags</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: TypeFlags)</h4></section></summary><div class=\"docblock\"><p>The intersection of a source flags value with the complement of a target flags value (<code>&amp;!</code>).</p>\n<p>This method is not equivalent to <code>self &amp; !other</code> when <code>other</code> has unknown bits set.\n<code>difference</code> won’t truncate <code>other</code>, but the <code>!</code> operator will.</p>\n</div></details></div></details>","SubAssign","hir_ty::TypeFlags"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TypeFlags\" class=\"impl\"><a href=\"#impl-TypeFlags\" class=\"anchor\">§</a><h3 class=\"code-header\">impl TypeFlags</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.empty\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">empty</a>() -&gt; TypeFlags</h4></section></summary><div class=\"docblock\"><p>Get a flags value with all bits unset.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.all\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">all</a>() -&gt; TypeFlags</h4></section></summary><div class=\"docblock\"><p>Get a flags value with all known bits set.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bits\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">bits</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Get the underlying bits value.</p>\n<p>The returned value is exactly the bits set in this flags value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bits\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">from_bits</a>(bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;TypeFlags&gt;</h4></section></summary><div class=\"docblock\"><p>Convert from a bits value.</p>\n<p>This method will return <code>None</code> if any unknown bits are set.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bits_truncate\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">from_bits_truncate</a>(bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.u16.html\">u16</a>) -&gt; TypeFlags</h4></section></summary><div class=\"docblock\"><p>Convert from a bits value, unsetting any unknown bits.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bits_retain\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">from_bits_retain</a>(bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.u16.html\">u16</a>) -&gt; TypeFlags</h4></section></summary><div class=\"docblock\"><p>Convert from a bits value exactly.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_name\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_name</a>(name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;TypeFlags&gt;</h4></section></summary><div class=\"docblock\"><p>Get a flags value with the bits of a flag with the given name set.</p>\n<p>This method will return <code>None</code> if <code>name</code> is empty or doesn’t\ncorrespond to any named flag.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Whether all bits in this flags value are unset.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_all\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">is_all</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Whether all known bits in this flags value are set.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersects\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">intersects</a>(&amp;self, other: TypeFlags) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Whether any set bits in a source flags value are also set in a target flags value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">contains</a>(&amp;self, other: TypeFlags) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Whether all set bits in a source flags value are also set in a target flags value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">insert</a>(&amp;mut self, other: TypeFlags)</h4></section></summary><div class=\"docblock\"><p>The bitwise or (<code>|</code>) of the bits in two flags values.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove</a>(&amp;mut self, other: TypeFlags)</h4></section></summary><div class=\"docblock\"><p>The intersection of a source flags value with the complement of a target flags value (<code>&amp;!</code>).</p>\n<p>This method is not equivalent to <code>self &amp; !other</code> when <code>other</code> has unknown bits set.\n<code>remove</code> won’t truncate <code>other</code>, but the <code>!</code> operator will.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.toggle\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">toggle</a>(&amp;mut self, other: TypeFlags)</h4></section></summary><div class=\"docblock\"><p>The bitwise exclusive-or (<code>^</code>) of the bits in two flags values.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">set</a>(&amp;mut self, other: TypeFlags, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is <code>false</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.intersection\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">intersection</a>(self, other: TypeFlags) -&gt; TypeFlags</h4></section></summary><div class=\"docblock\"><p>The bitwise and (<code>&amp;</code>) of the bits in two flags values.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.union\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">union</a>(self, other: TypeFlags) -&gt; TypeFlags</h4></section></summary><div class=\"docblock\"><p>The bitwise or (<code>|</code>) of the bits in two flags values.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.difference\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">difference</a>(self, other: TypeFlags) -&gt; TypeFlags</h4></section></summary><div class=\"docblock\"><p>The intersection of a source flags value with the complement of a target flags value (<code>&amp;!</code>).</p>\n<p>This method is not equivalent to <code>self &amp; !other</code> when <code>other</code> has unknown bits set.\n<code>difference</code> won’t truncate <code>other</code>, but the <code>!</code> operator will.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.symmetric_difference\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">symmetric_difference</a>(self, other: TypeFlags) -&gt; TypeFlags</h4></section></summary><div class=\"docblock\"><p>The bitwise exclusive-or (<code>^</code>) of the bits in two flags values.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.complement\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">complement</a>(self) -&gt; TypeFlags</h4></section></summary><div class=\"docblock\"><p>The bitwise negation (<code>!</code>) of the bits in a flags value, truncating the result.</p>\n</div></details></div></details>",0,"hir_ty::TypeFlags"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TypeFlags\" class=\"impl\"><a href=\"#impl-TypeFlags\" class=\"anchor\">§</a><h3 class=\"code-header\">impl TypeFlags</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">iter</a>(&amp;self) -&gt; Iter&lt;TypeFlags&gt;</h4></section></summary><div class=\"docblock\"><p>Yield a set of contained flags values.</p>\n<p>Each yielded flags value will correspond to a defined named flag. Any unknown bits\nwill be yielded together as a final flags value.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_names\" class=\"method\"><h4 class=\"code-header\">pub const fn <a class=\"fn\">iter_names</a>(&amp;self) -&gt; IterNames&lt;TypeFlags&gt;</h4></section></summary><div class=\"docblock\"><p>Yield a set of contained named flags values.</p>\n<p>This method is like <a href=\"#method.iter\"><code>iter</code></a>, except only yields bits in contained named flags.\nAny unknown bits, or bits not corresponding to a contained flag will not be yielded.</p>\n</div></details></div></details>",0,"hir_ty::TypeFlags"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TypeFlags\" class=\"impl\"><a href=\"#impl-TypeFlags\" class=\"anchor\">§</a><h3 class=\"code-header\">impl TypeFlags</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.HAS_TY_INFER\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">HAS_TY_INFER</a>: TypeFlags = _</h4></section></summary><div class=\"docblock\"><p>Does the type contain an InferenceVar</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.HAS_RE_INFER\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">HAS_RE_INFER</a>: TypeFlags = _</h4></section></summary><div class=\"docblock\"><p>Does the type contain a lifetime with an InferenceVar</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.HAS_CT_INFER\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">HAS_CT_INFER</a>: TypeFlags = _</h4></section></summary><div class=\"docblock\"><p>Does the type contain a ConstValue with an InferenceVar</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.HAS_TY_PLACEHOLDER\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">HAS_TY_PLACEHOLDER</a>: TypeFlags = _</h4></section></summary><div class=\"docblock\"><p>Does the type contain a Placeholder TyKind</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.HAS_RE_PLACEHOLDER\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">HAS_RE_PLACEHOLDER</a>: TypeFlags = _</h4></section></summary><div class=\"docblock\"><p>Does the type contain a lifetime with a Placeholder</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.HAS_CT_PLACEHOLDER\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">HAS_CT_PLACEHOLDER</a>: TypeFlags = _</h4></section></summary><div class=\"docblock\"><p>Does the type contain a ConstValue Placeholder</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.HAS_FREE_LOCAL_REGIONS\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">HAS_FREE_LOCAL_REGIONS</a>: TypeFlags = _</h4></section></summary><div class=\"docblock\"><p>True when the type has free lifetimes related to a local context</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.HAS_TY_PROJECTION\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">HAS_TY_PROJECTION</a>: TypeFlags = _</h4></section></summary><div class=\"docblock\"><p>Does the type contain a projection of an associated type</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.HAS_TY_OPAQUE\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">HAS_TY_OPAQUE</a>: TypeFlags = _</h4></section></summary><div class=\"docblock\"><p>Does the type contain an opaque type</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.HAS_CT_PROJECTION\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">HAS_CT_PROJECTION</a>: TypeFlags = _</h4></section></summary><div class=\"docblock\"><p>Does the type contain an unevaluated const projection</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.HAS_ERROR\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">HAS_ERROR</a>: TypeFlags = _</h4></section></summary><div class=\"docblock\"><p>Does the type contain an error</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.HAS_RE_ERROR\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">HAS_RE_ERROR</a>: TypeFlags = _</h4></section></summary><div class=\"docblock\"><p>Does the type contain an error lifetime</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.HAS_FREE_REGIONS\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">HAS_FREE_REGIONS</a>: TypeFlags = _</h4></section></summary><div class=\"docblock\"><p>Does the type contain any free lifetimes</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.HAS_RE_LATE_BOUND\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">HAS_RE_LATE_BOUND</a>: TypeFlags = _</h4></section></summary><div class=\"docblock\"><p>True when the type contains lifetimes that will be substituted when function is called</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.HAS_RE_ERASED\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">HAS_RE_ERASED</a>: TypeFlags = _</h4></section></summary><div class=\"docblock\"><p>True when the type contains an erased lifetime</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.STILL_FURTHER_SPECIALIZABLE\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">STILL_FURTHER_SPECIALIZABLE</a>: TypeFlags = _</h4></section></summary><div class=\"docblock\"><p>Does the type contain placeholders or inference variables that could be replaced later</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.HAS_FREE_LOCAL_NAMES\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">HAS_FREE_LOCAL_NAMES</a>: TypeFlags = _</h4></section></summary><div class=\"docblock\"><p>True when the type contains free names local to a particular context</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.HAS_PROJECTION\" class=\"associatedconstant\"><h4 class=\"code-header\">pub const <a class=\"constant\">HAS_PROJECTION</a>: TypeFlags = _</h4></section></summary><div class=\"docblock\"><p>Does the type contain any form of projection</p>\n</div></details></div></details>",0,"hir_ty::TypeFlags"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-TypeFlags\" class=\"impl\"><a href=\"#impl-UpperHex-for-TypeFlags\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.UpperHex.html\" title=\"trait core::fmt::UpperHex\">UpperHex</a> for TypeFlags</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.UpperHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.82.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.82.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.82.0/core/fmt/trait.UpperHex.html#tymethod.fmt\">Read more</a></div></details></div></details>","UpperHex","hir_ty::TypeFlags"],["<section id=\"impl-Copy-for-TypeFlags\" class=\"impl\"><a href=\"#impl-Copy-for-TypeFlags\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for TypeFlags</h3></section>","Copy","hir_ty::TypeFlags"],["<section id=\"impl-Eq-for-TypeFlags\" class=\"impl\"><a href=\"#impl-Eq-for-TypeFlags\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for TypeFlags</h3></section>","Eq","hir_ty::TypeFlags"],["<section id=\"impl-StructuralPartialEq-for-TypeFlags\" class=\"impl\"><a href=\"#impl-StructuralPartialEq-for-TypeFlags\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for TypeFlags</h3></section>","StructuralPartialEq","hir_ty::TypeFlags"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[62165]}