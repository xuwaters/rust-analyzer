(function() {
    var implementors = Object.fromEntries([["ide_db",[["impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a> for <a class=\"enum\" href=\"ide_db/assists/enum.AssistKind.html\" title=\"enum ide_db::assists::AssistKind\">AssistKind</a>"]]],["ide_ssr",[["impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a> for <a class=\"struct\" href=\"ide_ssr/struct.SsrPattern.html\" title=\"struct ide_ssr::SsrPattern\">SsrPattern</a>"],["impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a> for <a class=\"struct\" href=\"ide_ssr/struct.SsrRule.html\" title=\"struct ide_ssr::SsrRule\">SsrRule</a>"]]],["parser",[["impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a> for <a class=\"enum\" href=\"parser/enum.Edition.html\" title=\"enum parser::Edition\">Edition</a>"]]],["rust_analyzer",[["impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a> for <a class=\"enum\" href=\"rust_analyzer/cli/flags/enum.OutputFormat.html\" title=\"enum rust_analyzer::cli::flags::OutputFormat\">OutputFormat</a>"]]],["xtask",[["impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a> for <a class=\"enum\" href=\"xtask/flags/enum.CodegenType.html\" title=\"enum xtask::flags::CodegenType\">CodegenType</a>"],["impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.82.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a> for <a class=\"enum\" href=\"xtask/flags/enum.MeasurementType.html\" title=\"enum xtask::flags::MeasurementType\">MeasurementType</a>"]]]]);
    if (window.register_implementors) {
        window.register_implementors(implementors);
    } else {
        window.pending_implementors = implementors;
    }
})()
//{"start":57,"fragment_lengths":[297,557,272,330,588]}